import { ContextManager } from '../context/index.js';
import { PromptManager } from './prompts.js';
import { ResponseProcessor } from './processor.js';
import { AIResponse, AIInteractionOptions } from './types.js';

/**
 * Manages interactions with AI services
 */
export class AIInteractionManager {
  private projectRoot: string;
  private contextManager: ContextManager;
  private promptManager: PromptManager;
  private responseProcessor: ResponseProcessor;
  private options: AIInteractionOptions;

  /**
   * Creates a new AIInteractionManager
   * @param options - Options for AI interaction
   */
  constructor(options: AIInteractionOptions) {
    this.projectRoot = options.projectRoot;
    this.options = {
      projectRoot: options.projectRoot,
      model: options.model || 'gpt-4',
      maxTokens: options.maxTokens || 4096,
      temperature: options.temperature || 0.7
    };

    this.contextManager = new ContextManager(this.projectRoot);
    this.promptManager = new PromptManager(this.projectRoot);
    this.responseProcessor = new ResponseProcessor(this.projectRoot);
  }

  /**
   * Plans a project based on a description
   * @param description - Project description
   * @returns AI response with planning details
   */
  async planProject(description: string): Promise<AIResponse> {
    // Build the planning prompt
    const prompt = await this.promptManager.buildPlanningPrompt(description);

    // Send to AI and get response
    const rawResponse = await this.sendToAI(prompt);

    // Process the response
    const response = this.responseProcessor.processResponse(rawResponse);

    // Apply changes to the project
    await this.responseProcessor.applyChanges(response);

    // Update context
    await this.updateContext('planning', description, response);

    return response;
  }

  /**
   * Implements a specific task
   * @param taskId - ID of the task to implement
   * @returns AI response with implementation details
   */
  async implementTask(taskId: string): Promise<AIResponse> {
    // Load context
    const context = await this.contextManager.load();

    // Update current task
    context.currentTask = taskId;
    await this.contextManager.save(context);

    // Build the implementation prompt
    const prompt = await this.promptManager.buildImplementationPrompt(taskId, context);

    // Send to AI and get response
    const rawResponse = await this.sendToAI(prompt);

    // Process the response
    const response = this.responseProcessor.processResponse(rawResponse);

    // Apply changes to the project
    await this.responseProcessor.applyChanges(response);

    // Update context
    await this.updateContext('development', `Implemented task: ${taskId}`, response);

    return response;
  }

  /**
   * Reviews code in specified files
   * @param files - List of files to review
   * @returns AI response with review details
   */
  async reviewCode(files: string[]): Promise<AIResponse> {
    // Build the review prompt
    const prompt = await this.promptManager.buildReviewPrompt(files);

    // Send to AI and get response
    const rawResponse = await this.sendToAI(prompt);

    // Process the response
    const response = this.responseProcessor.processResponse(rawResponse);

    // Apply changes to the project
    await this.responseProcessor.applyChanges(response);

    // Update context
    await this.updateContext('review', `Reviewed files: ${files.join(', ')}`, response);

    return response;
  }

  /**
   * Sends a prompt to the AI service
   * @param prompt - Prompt to send
   * @returns Raw response from the AI service
   */
  private async sendToAI(prompt: string): Promise<string> {
    // This is a mock implementation
    // In a real implementation, you would call an actual AI service API
    console.log('Sending prompt to AI service...');

    // For now, return a mock response
    return `
# AI Response

I've analyzed your request and here's my response.

## Analysis

This is a mock response for demonstration purposes. In a real implementation, this would be the actual response from the AI service.

## Suggestions

- Implement the actual AI service integration
- Add error handling for API calls
- Consider rate limiting for API requests

## Next Steps

1. Complete the implementation
2. Test with real AI service
3. Add more features

\`\`\`file src/example.ts\`\`\`
\`\`\`typescript
// This is an example file generated by the AI
console.log('Hello, world!');
\`\`\`
`;
  }

  /**
   * Updates the project context with changes
   * @param phase - Current project phase
   * @param description - Description of the changes
   * @param response - AI response
   */
  private async updateContext(
    phase: 'planning' | 'development' | 'review',
    description: string,
    response: AIResponse
  ): Promise<void> {
    const context = await this.contextManager.load();

    // Update project phase
    context.projectState.phase = phase;

    // Add recent change
    context.recentChanges.unshift({
      timestamp: Date.now(),
      type: phase === 'planning' ? 'doc' : phase === 'development' ? 'feature' : 'test',
      description
    });

    // Limit recent changes to 10
    if (context.recentChanges.length > 10) {
      context.recentChanges = context.recentChanges.slice(0, 10);
    }

    // Save updated context
    await this.contextManager.save(context);
  }
}
